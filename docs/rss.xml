<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>金权的博客</title><link>https://mjqgh.github.io</link><description>记录成长</description><copyright>金权的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://mjqgh.github.io</link></image><lastBuildDate>Mon, 01 Jul 2024 06:13:02 +0000</lastBuildDate><managingEditor>金权的博客</managingEditor><ttl>60</ttl><webMaster>金权的博客</webMaster><item><title>数据分析咖哥十话</title><link>https://mjqgh.github.io/post/shu-ju-fen-xi-ka-ge-shi-hua.html</link><description>![1719797253337](https://github.com/mjqgh/mjqgh.github.io/assets/173347114/2107b3bb-77da-4d36-9af2-e87a828ccdb5)&#13;
![1719797253160](https://github.com/mjqgh/mjqgh.github.io/assets/173347114/6d93691c-a773-4ba9-a48f-00362f80daf5)&#13;
。</description><guid isPermaLink="true">https://mjqgh.github.io/post/shu-ju-fen-xi-ka-ge-shi-hua.html</guid><pubDate>Mon, 01 Jul 2024 06:12:41 +0000</pubDate></item><item><title>multiprocessing.dummy</title><link>https://mjqgh.github.io/post/multiprocessing.dummy.html</link><description>## 通用代码框架&#13;
```python&#13;
# multiprocessing为python内置模块&#13;
from multiprocessing.dummy import Pool  # 非常容易漏掉dummy&#13;
import threading&#13;
&#13;
pool = Pool(10)  # 开启线程数量，这里设置10个&#13;
lock = threading.Lock()  # 线程锁，多个线程同时访问一个对象时需要使用，比如全局变量&#13;
df = pd.DataFrame()&#13;
&#13;
def multi_process(param):  #多线程函数&#13;
    # 代码......&#13;
    df0 = ...&#13;
    lock.acquire()  # 上锁&#13;
    df = df.append(df0)  # 例子，此处为一对多，多个线程修改一个df（全局），容易出错，应该上锁&#13;
    lock.release()  # 解锁&#13;
&#13;
    # 代码......&#13;
&#13;
pool.map(multi_process, list_params)  # 开启多线程运行&#13;
# multi_process为多线程函数名&#13;
# list_params为可迭代对象，比如列表&#13;
# 如果要传多个参数，可用字典型列表等&#13;
&#13;
pool.close()&#13;
pool.join()&#13;
# 调用join之前，先调用close函数，否则会出错。</description><guid isPermaLink="true">https://mjqgh.github.io/post/multiprocessing.dummy.html</guid><pubDate>Fri, 21 Jun 2024 08:17:16 +0000</pubDate></item><item><title>正则表达式总结</title><link>https://mjqgh.github.io/post/zheng-ze-biao-da-shi-zong-jie.html</link><description>【单字符】 巧记：我是单身狗。</description><guid isPermaLink="true">https://mjqgh.github.io/post/zheng-ze-biao-da-shi-zong-jie.html</guid><pubDate>Thu, 20 Jun 2024 16:02:12 +0000</pubDate></item><item><title>Pandas常用函数</title><link>https://mjqgh.github.io/post/Pandas-chang-yong-han-shu.html</link><description>## 筛选&#13;
```python&#13;
df.loc[哪些行, 哪些列]&#13;
```&#13;
&#13;
## 对【列】的所有单元格处理&#13;
```python&#13;
df['A'].apply(func)&#13;
```&#13;
## 对【df】的所有单元格处理&#13;
```python&#13;
df.applymap(func)&#13;
```&#13;
## groupby+apply 万能聚合统计&#13;
（可以理解为，把聚合后的每个df传递给apply函数进行聚合处理，function为自定义的聚合函数）&#13;
```python&#13;
df.groupby('列1').apply(function) &#13;
```&#13;
## 表匹配（注意保证一对一，避免出现一对多）&#13;
```python&#13;
pd.merge(df1, df2, left_on, right_on, how)&#13;
```&#13;
## 表合并&#13;
```python&#13;
pd.concat([df1, df2])&#13;
```&#13;
## 删除列&#13;
```python&#13;
df.drop(['A', 'B'], axis=1)&#13;
```&#13;
## 重置索引&#13;
```python&#13;
df.reset_index(drop=True)  # 去掉原索引&#13;
df.reset_index(drop=False)  # 默认，把原索引作为列保留&#13;
```。</description><guid isPermaLink="true">https://mjqgh.github.io/post/Pandas-chang-yong-han-shu.html</guid><pubDate>Thu, 20 Jun 2024 15:48:43 +0000</pubDate></item><item><title>groupby+apply万能聚合统计</title><link>https://mjqgh.github.io/post/groupby%2Bapply-wan-neng-ju-he-tong-ji.html</link><description>groupby 是Pandas中进行分组运算的函数，它能将数据集按照你需要的列进行分组。</description><guid isPermaLink="true">https://mjqgh.github.io/post/groupby%2Bapply-wan-neng-ju-he-tong-ji.html</guid><pubDate>Thu, 20 Jun 2024 14:17:04 +0000</pubDate></item><item><title>测试文章</title><link>https://mjqgh.github.io/post/ce-shi-wen-zhang.html</link><description>你好啊。</description><guid isPermaLink="true">https://mjqgh.github.io/post/ce-shi-wen-zhang.html</guid><pubDate>Thu, 20 Jun 2024 08:03:18 +0000</pubDate></item></channel></rss>